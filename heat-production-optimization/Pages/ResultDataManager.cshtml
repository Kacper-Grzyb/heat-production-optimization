@page
@model heat_production_optimization.Pages.ResultDataManagerModel
@{
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Production Unit Scenario</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        body {
            margin: auto;
            padding: 0;
            justify-content: center;
            align-items: center;
        }

        .center-box {
            text-align: center;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            width: 80vw;
            max-width: 800px;
            font-family: Arial, sans-serif;
        }

        .button-container {
            margin-top: 15px;
            border-radius: 10px;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        button {
            flex: 1;
            padding: 15px 0;
            margin: 0 10px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #e60000;
            color: #fff;
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 48%;
        }

        button:hover {
            background-color: #ff4d4d;
        }

        button:active {
            transform: scale(0.95);
        }

        button:disabled {
            background-color: #ccc;
            color: #999;
            cursor: not-allowed;
        }

        .checkbox-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-bottom: 10px;
            margin-top: 10px;
        }

        .checkbox-item {
            margin-right: 20px;
            display: flex;
            align-items: center;
        }

    </style>
</head>

<body>
    <div class="d-flex justify-content-center">
        <div class="center-box">
            <h1>Choose Boilers to Include in Optimization</h1>
            <form method="post">
                <div class="checkbox-container">
                    @foreach (IUnit unit in Model.displayProductionUnits)
                    {
                        <div class="checkbox-item">
                            <input id="@unit.Name" name="BoilersChecked" type="checkbox" value="@unit.Name" @(Model.optimizerProductionUnits.Any(u => u.Name == unit.Name) ? "checked" : "") />
                            <label for="@unit.Name">@unit.Alias</label>
                        </div>
                    }
                </div>
                <input type="hidden" id="selectedUnits" name="selectedUnits" value="@string.Join(",", Model.optimizerProductionUnits.Select(u => u.Name))" />
                <div class="button-container">
                    @if (Model.ShowResults)
                    {
                        <button type="submit">Optimize</button>
                    }
                    else
                    {
                        <button id="optimizeButton" type="submit" disabled>Optimize</button>
                    }
                    <button id="saveToCSVButton" type="button">Save to CSV</button>
                </div>
            </form>
        </div>
    </div>

    <div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Optimized Results</h1>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">Total Heat Produced:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.TotalHeatProduction</p>
            </div>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">Total Electricity Produced:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.TotalElectricityProduction</p>
            </div>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">Expenses:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.Expenses</p>
            </div>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">Consumption of Gas:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.ConsumptionOfGas</p>
            </div>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">Consumption of Oil:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.ConsumptionOfOil</p>
            </div>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">Consumption of Electricity:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.ConsumptionOfElectricity</p>
            </div>
            <div class="d-flex justify-content-center">
                <p style="margin: 0px 5px 0px 0px">CO2 Produced:</p>
                <p style="margin: 0px 0px 5px 0px">@Model.CO2Emission</p>
            </div>
        </div>
    </div>

    @if (string.IsNullOrEmpty(Model.SelectedUnit))
    {
        <div class="d-flex justify-content-center mt-5 result-box">
            <div class="center-box">
                <h1>Unoptimized Results</h1>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Total Heat Produced:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstHeat</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Total Electricity Produced:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstElectricity</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Expenses:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstExpenses</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Consumption of Gas:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstConsumptionOfGas</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Consumption of Oil:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstConsumptionOfOil</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Consumption of Electricity:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstConsumptionOfElectricity</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">CO2 Produced:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.WorstCO2Emission</p>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-5 result-box">
            <div class="center-box ">
                <h1>Randomized Results</h1>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Total Heat Produced:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomHeat</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Total Electricity Produced:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomElectricity</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Expenses:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomExpenses</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Consumption of Gas:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomConsumptionOfGas</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Consumption of Oil:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomConsumptionOfOil</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">Consumption of Electricity:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomConsumptionOfElectricity</p>
                </div>
                <div class="d-flex justify-content-center">
                    <p style="margin: 0px 5px 0px 0px">CO2 Produced:</p>
                    <p style="margin: 0px 0px 5px 0px">@Model.RandomCO2Emission</p>
                </div>
            </div>
        </div>
    }

    <div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Graph</h1>
            <div class="d-flex justify-content-center">
                <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                <script type="text/javascript">
                    google.charts.load('current', {'packages':['corechart', 'bar']});
                    google.charts.setOnLoadCallback(drawStuff);

                    function drawStuff() {

                    var button = document.getElementById('change-chart');
                    var chartDiv = document.getElementById('chart_div');

                    var data = google.visualization.arrayToDataTable([
                    ['Galaxy', 'Distance', 'Brightness'],
                    ['Canis Major Dwarf', 8000, 23.3],
                    ['Sagittarius Dwarf', 24000, 4.5],
                    ['Ursa Major II Dwarf', 30000, 14.3],
                    ['Lg. Magellanic Cloud', 50000, 0.9],
                    ['Bootes I', 60000, 13.1]
                    ]);

                    var materialOptions = {
                    width: 900,
                    chart: {
                        title: 'Nearby galaxies',
                        subtitle: 'distance on the left, brightness on the right'
                    },
                    series: {
                        0: { axis: 'distance' }, // Bind series 0 to an axis named 'distance'.
                        1: { axis: 'brightness' } // Bind series 1 to an axis named 'brightness'.
                    },
                    axes: {
                        y: {
                        distance: {label: 'parsecs'}, // Left y-axis.
                        brightness: {side: 'right', label: 'apparent magnitude'} // Right y-axis.
                        }
                    }
                    };

                    var classicOptions = {
                    width: 900,
                    series: {
                        0: {targetAxisIndex: 0},
                        1: {targetAxisIndex: 1}
                    },
                    title: 'Nearby galaxies - distance on the left, brightness on the right',
                    vAxes: {
                        // Adds titles to each axis.
                        0: {title: 'parsecs'},
                        1: {title: 'apparent magnitude'}
                    }
                    };

                    function drawMaterialChart() {
                    var materialChart = new google.charts.Bar(chartDiv);
                    materialChart.draw(data, google.charts.Bar.convertOptions(materialOptions));
                    button.innerText = 'Change to Classic';
                    button.onclick = drawClassicChart;
                    }

                    function drawClassicChart() {
                    var classicChart = new google.visualization.ColumnChart(chartDiv);
                    classicChart.draw(data, classicOptions);
                    button.innerText = 'Change to Material';
                    button.onclick = drawMaterialChart;
                    }

                    drawMaterialChart();
                };
                </script>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const checkboxes = document.querySelectorAll('input[name="BoilersChecked"]');
            const optimizeButton = document.getElementById('optimizeButton');
            const saveToCSVButton = document.getElementById('saveToCSVButton');
            const selectedUnitsInput = document.getElementById('selectedUnits');

            function updateSelectedUnits() {
                const selectedUnits = Array.from(checkboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.value);
                selectedUnitsInput.value = selectedUnits.join(",");
            }

            function toggleOptimizeButton() {
                let anyUnchecked = false;
                checkboxes.forEach(checkbox => {
                    if (!checkbox.checked && checkbox.getAttribute('checked') !== 'checked') {
                        anyUnchecked = true;
                    }
                });

                optimizeButton.disabled = !anyUnchecked;
                if (anyUnchecked) {
                    optimizeButton.style.backgroundColor = '#e60000';
                    optimizeButton.style.color = '#fff';
                    optimizeButton.style.cursor = 'pointer';
                } else {
                    optimizeButton.style.backgroundColor = '#ccc';
                    optimizeButton.style.color = '#999';
                    optimizeButton.style.cursor = 'not-allowed';
                }

                
                updateSelectedUnits();
            }

            @* function saveToCSV() {
                const headers = ["Total Heat Produced", "Total Electricity Produced", "Expenses", "Consumption of Gas", "Consumption of Oil", "Consumption of Electricity", "CO2 Produced"];
                const data = [
                    ["@Model.TotalHeatProduction", "@Model.TotalElectricityProduction", "@Model.Expenses", "@Model.ConsumptionOfGas", "@Model.ConsumptionOfOil", "@Model.ConsumptionOfElectricity", "@Model.CO2Emission"]
                ];

                let csvContent = "data:text/csv;charset=utf-8,"
                    + headers.join(",") + "\n"
                    + data.map(e => e.join(",")).join("\n");

                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", "optimized_results.csv");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }*@

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', toggleOptimizeButton);
            });

            // Restore the state of checkboxes from hidden field
            const savedSelectedUnits = selectedUnitsInput.value.split(",");
            savedSelectedUnits.forEach(unit => {
                const checkbox = document.getElementById(unit);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });

            // Initial check
            toggleOptimizeButton();

            saveToCSVButton.addEventListener('click', saveToCSV);

            // Preserve the original button functionality
            optimizeButton.addEventListener('click', (event) => {
                // Ensure the original functionality here
            });
        });
    </script>
</body>

</html>
