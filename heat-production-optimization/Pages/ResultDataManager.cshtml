@page
@model heat_production_optimization.Pages.ResultDataManagerModel
@using Newtonsoft.Json
@{
    var heatDemandJsonData = JsonConvert.SerializeObject(Model.heatDemandDataForChart);
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Production Unit Scenario</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        body {
            margin: auto;
            padding: 0;
            justify-content: center;
            align-items: center;
        }

        h1 {
            font-size: 2rem;
        }

        .center-box {
            text-align: center;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            width: 80vw;
            max-width: 1000px;
            font-family: Arial, sans-serif;
            justify-content: center;
            align-items: center;
        }

        .results-display {
            max-width: 400px;
            margin-top: 10px;
        }

        .button-container {
            margin-top: 15px;
            border-radius: 10px;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        button {
            flex: 1;
            padding: 15px 0;
            margin: 0 10px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #ffa31a;
            color: #fff;
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 48%;
        }

        .LinkButton {
            flex: 1;
            padding: 15px 0;
            margin: 0 10px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #ffa31a;
            color: #fff;
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 48%;
        }

        button:hover {
            background-color: #d98e1e;
        }

        button:active {
            transform: scale(0.95);
        }

        button:disabled {
            background-color: #ccc;
            color: #999;
            cursor: not-allowed;
        }

        .LinkButton:hover {
            background-color: #d98e1e;
            color: #fff;
        }

        .LinkButton:active {
            transform: scale(0.95);
        }

        .LinkButton:disabled {
            background-color: #ccc;
            color: #999;
            cursor: not-allowed;
        }

        .checkbox-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-bottom: 10px;
            margin-top: 10px;
        }

        .checkbox-item {
            margin-right: 20px;
            display: flex;
            align-items: center;
        }

    </style>
</head>

<body>
    <div class="d-flex justify-content-center">
        <div class="center-box">
            <h1>Optimization Settings</h1>
            <form method="post">
                @if(Model.errorMessage != string.Empty)
                {
                    <p>@Model.errorMessage</p>
                }
                <div class="checkbox-container">
                    @foreach (IUnit unit in Model.displayProductionUnits)
                    {
                        <div class="checkbox-item">
                            <input id="@unit.Name" name="BoilersChecked" type="checkbox" value="@unit.Name" @(Model.optimizerProductionUnits.Any(u => u.Name == unit.Name) ? "checked" : "") />
                            <label for="@unit.Name">&nbsp; @unit.Alias</label>
                        </div>
                    }
                </div>
                <input type="hidden" id="selectedUnits" name="selectedUnits" value="@string.Join(",", Model.optimizerProductionUnits.Select(u => u.Name))" />

                <div>
                    <label for="optimizationOption">Select Optimization Option:</label>
                    <select id="optimizationParameter" name="OptimizationParameter" asp-for="OptimizationParameter">
                        <option value="@OptimizationOption.Cost">Cost</option>
                        <option value="@OptimizationOption.Emission">Emission</option>
                        <option value="@OptimizationOption.Both">Both</option>
                    </select>
                </div>

                <div class="mt-3">
                    <label for="optimizerChoice">Select Which Optimizer To Use:</label>
                    <select id="optimizerChoice" name="OptimizerToUse" asp-for="OptimizerToUse">
                        <option value="@OptimizerChoice.Standard">Standard</option>
                        <option value="@OptimizerChoice.NeuralNetwork">Neural Network</option>
                    </select>
                </div>

                <div class="button-container">
                    <button id="optimizeButton" type="submit" disabled>Optimize</button>
                    <a class="LinkButton nav-link" asp-area="" asp-page="/UnitActivations">Unit Activations</a> 
                    <a class="LinkButton nav-link" asp-area="" asp-page="/CsvDownload">Save to CSV</a>
                    <a class="LinkButton nav-link" asp-area="" asp-page="/ExcelDownload">Save to Excel</a>
                </div>
            </form>
        </div>
    </div>

    <div class="d-flex justify-content-center mt-5">
		<div class="center-box">
            <h1>Optimized Results</h1>

			<div class="d-flex justify-content-center">
				<div class="results-display">
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">Total Heat Produced:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.TotalHeatProduction [MW]</p>
					</div>
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">Total Electricity Produced:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.TotalElectricityProduction [MW]</p>
					</div>
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">Expenses:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.Expenses [DKK]</p>
					</div>
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">Consumption of Gas:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.ConsumptionOfGas [MWh(gas)]</p>
					</div>
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">Consumption of Oil:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.ConsumptionOfOil [MWh(oil)]</p>
					</div>
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">Consumption of Electricity:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.ConsumptionOfElectricity [MWh]</p>
					</div>
					<div class="d-flex">
						<p style="margin: 0px 5px 0px 0px">CO2 Produced:</p>
						<p style="margin: 0px 0px 5px 0px">@Model.CO2Emission [kg]</p>
					</div>
				</div>
			</div>
		</div>
    </div>

    @*line chart for heat demand for each time frame*@
    <div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Heat Demand</h1>
            <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
            <script type="text/javascript">
                google.charts.load('current', { 'packages': ['corechart'] });
                google.charts.setOnLoadCallback(drawChart);

                function drawChart() {
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Timeframe');
                    data.addColumn('number', 'HeatDemand');

                    var chartData = @Html.Raw(heatDemandJsonData);
                    chartData.forEach(function (item) {
                        data.addRow([item.Timeframe, item.HeatDemand])
                    })

                    var options = {
                        vAxis: {
                            title: 'Heat Demand [MWh]'
                        },
                        hAxis: {
                            textPosition: 'none',
                            showTextEvery: 24
                        },
                        colors: ['#e2431e'],
                        interpolateNulls: true
                    };

                    var chart = new google.visualization.LineChart(document.getElementById('curve_chart1'));

                    chart.draw(data, options);
                }
            </script>
            <div id="curve_chart1" style="width: 900px; height: 500px"></div>
        </div>
    </div>

    <div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Electricity Prices</h1>
            <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
            <script type="text/javascript">
                google.charts.load('current', { 'packages': ['corechart'] });
                google.charts.setOnLoadCallback(drawChart);

                function drawChart() {
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Timeframe');
                    data.addColumn('number', 'Electricity Price');

                    var chartData = @Html.Raw(heatDemandJsonData);
                    chartData.forEach(function (item) {
                        data.addRow([item.Timeframe, item.ElectricityPrice])
                    })

                    var options = {
                        vAxis: {
                            title: 'Electricity Price [DKK]'
                        },
                        hAxis: {
                            textPosition: 'none',
                            showTextEvery: 24
                        },
                        colors: ['#1c91c0'],
                        interpolateNulls: true
                    };

                    var chart = new google.visualization.LineChart(document.getElementById('curve_chart2'));

                    chart.draw(data, options);
                }
            </script>
            <div id="curve_chart2" style="width: 900px; height: 500px"></div>
        </div>
    </div>

    @*stacked column or area chart for heat produced by each boiler for each time frame '#1c91c0', *@

    <div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Expenses and CO2 Emission</h1>
            <div class="d-flex justify-content-center">
                <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                <script type="text/javascript">
                    google.charts.load('current', {'packages':['bar']});
                    google.charts.setOnLoadCallback(drawChart1);

                    function drawChart1() {
                        var data = google.visualization.arrayToDataTable([
                            ['Name', 'Expenses', 'CO2 Emission'],
                            ['Optimized', Math.abs(@Model.Expenses), @Model.CO2Emission],
                            ['Worst', Math.abs(@Model.WorstExpenses), @Model.WorstCO2Emission],
                            ['Random', Math.abs(@Model.RandomExpenses), @Model.RandomCO2Emission],
                        ]);

                        var options = {
                            chart: {
                                title: 'Total Heat Produced', 
                                subtitle: 'Optimized, Unoptimized, and Random',
                            }
                        };

                        var chart = new google.charts.Bar(document.getElementById('columnchart_material_1'));
                        chart.draw(data, google.charts.Bar.convertOptions(options));
                    }
                </script>
            </div>
            <div id="columnchart_material_1" style="width: 800px; height: 500px;"></div>
        </div>
    </div>

    <div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Consumption Graph</h1>
            <div class="d-flex justify-content-center">
                <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                <script type="text/javascript">
                    google.charts.load('current', {'packages':['bar']});
                    google.charts.setOnLoadCallback(drawChart2);

                    function drawChart2() {
                        var data = google.visualization.arrayToDataTable([
                            ['Name', 'Total Electricity Produced', 'Consumption of Gas', 'Consumption of Oil', 'Consumption of Electricty'],
                            ['Optimized', @Model.TotalElectricityProduction, @Model.ConsumptionOfGas, @Model.ConsumptionOfOil, @Model.ConsumptionOfElectricity],
                            ['Worst', @Model.WorstElectricity, @Model.WorstConsumptionOfGas, @Model.WorstConsumptionOfOil, @Model.WorstConsumptionOfElectricity],
                            ['Random', @Model.RandomElectricity, @Model.RandomConsumptionOfGas, @Model.RandomConsumptionOfOil, @Model.RandomConsumptionOfElectricity],
                        ]);

                        var options = {
                            chart: {
                                title: 'Total Heat Produced', 
                                subtitle: 'Optimized, Unoptimized, and Random',
                            }
                        };

                        var chart = new google.charts.Bar(document.getElementById('columnchart_material_2'));
                        chart.draw(data, google.charts.Bar.convertOptions(options));
                    }
                </script>
            </div>
            <div id="columnchart_material_2" style="width: 800px; height: 500px;"></div>
        </div>
    </div>

<div class="d-flex justify-content-center mt-5">
        <div class="center-box">
            <h1>Total Heat and Electricity Produced</h1>
            <div class="d-flex justify-content-center">
                <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
                <script type="text/javascript">
                    google.charts.load('current', {'packages':['bar']});
                    google.charts.setOnLoadCallback(drawChart3);

                    function drawChart3() {
                        var data = google.visualization.arrayToDataTable([
                            ['Name', 'Heat Demand', 'Electricity Produced'],
                            ['Optimized', @Model.TotalHeatProduction, @Model.TotalElectricityProduction],
                            ['Worst', @Model.WorstHeat, @Model.WorstElectricity],
                            ['Random', @Model.WorstElectricity, @Model.RandomElectricity],
                        ]);

                        var options = {
                            chart: {
                                title: 'Total Heat Produced', 
                                subtitle: 'Optimized, Unoptimized, and Random',
                            }
                        };

                        var chart = new google.charts.Bar(document.getElementById('columnchart_material_3'));
                        chart.draw(data, google.charts.Bar.convertOptions(options));
                    }
                </script>
            </div>
            <div id="columnchart_material_3" style="width: 800px; height: 500px;"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const checkboxes = document.querySelectorAll('input[name="BoilersChecked"]');
            const optimizeButton = document.getElementById('optimizeButton');
            const optimizationParameter = document.getElementById('optimizationParameter');
            const optimizerChoice = document.getElementById('optimizerChoice')

            const initialSelectedUnits = document.getElementById('selectedUnits').value;
            const initialOptimizationParameter = optimizationParameter.value;
            const initialOptimizerChoice = optimizerChoice.value;

            function toggleOptimizeButton() {
                let currentSelectedUnits = Array.from(checkboxes)
                                                .filter(checkbox => checkbox.checked)
                                                .map(checkbox => checkbox.value)
                                                .join(',');

                let isUnitsChanged = initialSelectedUnits !== currentSelectedUnits;
                let isOptimizationChanged = initialOptimizationParameter !== optimizationParameter.value;
                let isOptimizerChanged = initialOptimizerChoice !== optimizerChoice.value;

                if (isUnitsChanged || isOptimizationChanged || isOptimizerChanged) {
                    optimizeButton.disabled = false;
                    optimizeButton.style.backgroundColor = '#ffa31a';
                    optimizeButton.style.color = '#fff';
                    optimizeButton.style.cursor = 'pointer';
                } else {
                    optimizeButton.disabled = true;
                    optimizeButton.style.backgroundColor = '#ccc';
                    optimizeButton.style.color = '#999';
                    optimizeButton.style.cursor = 'not-allowed';
                }
            }

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', toggleOptimizeButton);
            });

            optimizationParameter.addEventListener('change', toggleOptimizeButton);
            optimizerChoice.addEventListener('change', toggleOptimizeButton);

            // Initial check
            toggleOptimizeButton();
        });
    </script>
</body>

</html>
